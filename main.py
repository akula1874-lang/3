#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TGStat.ru Parser - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Windows/PyCharm
–ê–≤—Ç–æ—Ä: AI Assistant
–í–µ—Ä—Å–∏—è: 2.0 (Windows Edition)

–ü–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ Telegram –∫–∞–Ω–∞–ª–∞—Ö –∏ —á–∞—Ç–∞—Ö —Å —Å–∞–π—Ç–∞ tgstat.ru
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Windows —á–µ—Ä–µ–∑ PyCharm
"""

import os
import sys
import time
import random
import logging
import requests
import json
import re
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import zipfile
import subprocess

# Selenium imports
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException
    from selenium.webdriver.common.action_chains import ActionChains
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("–í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install selenium requests")
    sys.exit(1)


class TGStatParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ TGStat.ru –¥–ª—è Windows"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.base_url = "https://tgstat.ru"
        self.driver = None
        self.results_dir = Path("results")
        self.logs_dir = Path("logs")
        self.driver_dir = Path("drivers")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for directory in [self.results_dir, self.logs_dir, self.driver_dir]:
            directory.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # User agents –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
        ]
        
        self.logger.info("üöÄ TGStat Parser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Windows")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_file = self.logs_dir / f"tgstat_parser_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(logging.INFO)
        
        # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(formatter)
        file_handler.setLevel(logging.DEBUG)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        self.logger.addHandler(console_handler)
        self.logger.addHandler(file_handler)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ Selenium
        selenium_logger = logging.getLogger('selenium')
        selenium_logger.setLevel(logging.WARNING)
    
    def check_internet_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            self.logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            response = requests.get("https://google.com", timeout=5)
            if response.status_code == 200:
                self.logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
        except requests.RequestException as e:
            self.logger.error(f"‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
        return False
    
    def get_chrome_version(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ Chrome –≤ Windows"""
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome –≤ Windows
            chrome_paths = [
                r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
                r"C:\Users\{username}\AppData\Local\Google\Chrome\Application\chrome.exe".format(
                    username=os.getenv('USERNAME', '')
                )
            ]
            
            for chrome_path in chrome_paths:
                if os.path.exists(chrome_path):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ wmic
                        result = subprocess.run([
                            'wmic', 'datafile', 'where', f'name="{chrome_path.replace(chr(92), chr(92)+chr(92))}"',
                            'get', 'Version', '/value'
                        ], capture_output=True, text=True, timeout=10)
                        
                        if result.returncode == 0:
                            for line in result.stdout.strip().split('\n'):
                                if line.startswith('Version='):
                                    version = line.split('=')[1].strip()
                                    major_version = version.split('.')[0]
                                    self.logger.info(f"üîç –ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è Chrome: {version} (–º–∞–∂–æ—Ä–Ω–∞—è: {major_version})")
                                    return major_version
                    except Exception as e:
                        self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ wmic: {e}")
                        continue
            
            self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é Chrome –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            return "120"  # –í–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ Chrome: {e}")
            return "120"
    
    def download_chromedriver(self, version: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ ChromeDriver –¥–ª—è Windows"""
        try:
            self.logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ChromeDriver –≤–µ—Ä—Å–∏–∏ {version}...")
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ChromeDriver
            base_url = "https://chromedriver.storage.googleapis.com"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            try:
                versions_url = f"{base_url}/{version}/chromedriver_win32.zip"
                response = requests.head(versions_url, timeout=10)
                
                if response.status_code != 200:
                    # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç URL –¥–ª—è –±–æ–ª–µ–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
                    versions_url = f"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/{version}.0.6167.85/win64/chromedriver-win64.zip"
                    response = requests.head(versions_url, timeout=10)
                    
                    if response.status_code != 200:
                        # Fallback –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
                        versions_url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip"
            except:
                versions_url = "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º ChromeDriver
            driver_zip = self.driver_dir / "chromedriver.zip"
            
            self.logger.info(f"üîó URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {versions_url}")
            
            response = requests.get(versions_url, stream=True, timeout=30)
            response.raise_for_status()
            
            with open(driver_zip, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(driver_zip, 'r') as zip_ref:
                zip_ref.extractall(self.driver_dir)
            
            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            driver_zip.unlink()
            
            # –ò—â–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            driver_paths = list(self.driver_dir.rglob("chromedriver.exe"))
            if driver_paths:
                driver_path = str(driver_paths[0])
                self.logger.info(f"‚úÖ ChromeDriver –∑–∞–≥—Ä—É–∂–µ–Ω: {driver_path}")
                return driver_path
            
            self.logger.error("‚ùå ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
            return None
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ChromeDriver: {e}")
            return None
    
    def setup_webdriver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver –¥–ª—è Windows"""
        try:
            self.logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebDriver...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥—Ä–∞–π–≤–µ—Ä
            existing_drivers = list(self.driver_dir.rglob("chromedriver.exe"))
            driver_path = None
            
            if existing_drivers:
                driver_path = str(existing_drivers[0])
                self.logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ChromeDriver: {driver_path}")
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä
                chrome_version = self.get_chrome_version()
                driver_path = self.download_chromedriver(chrome_version)
                
                if not driver_path:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ChromeDriver")
                    return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π Chrome
            chrome_options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--disable-web-security")
            chrome_options.add_argument("--disable-features=VizDisplayCompositor")
            chrome_options.add_argument("--disable-extensions")
            chrome_options.add_argument("--disable-plugins")
            chrome_options.add_argument("--disable-images")
            chrome_options.add_argument("--disable-javascript")
            
            # User agent
            user_agent = random.choice(self.user_agents)
            chrome_options.add_argument(f"--user-agent={user_agent}")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            chrome_options.add_argument("--window-size=1920,1080")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
            chrome_options.add_experimental_option('useAutomationExtension', False)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
            service = Service(driver_path)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä–∞–π–≤–µ—Ä
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # –£–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            self.logger.info("‚úÖ WebDriver —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ WebDriver: {e}")
            return False
    
    def wait_for_cloudflare(self, timeout: int = 30) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare –∑–∞—â–∏—Ç—ã"""
        try:
            self.logger.info("üõ°Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare –∑–∞—â–∏—Ç—ã...")
            
            start_time = time.time()
            
            while time.time() - start_time < timeout:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Cloudflare
                    cf_elements = self.driver.find_elements(By.CSS_SELECTOR, 
                        ".cf-browser-verification, .cf-checking-browser, .cf-spinner-allow-5-secs")
                    
                    if not cf_elements:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                        if "tgstat.ru" in self.driver.current_url.lower():
                            self.logger.info("‚úÖ Cloudflare –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
                            return True
                    
                    time.sleep(2)
                    
                except Exception:
                    pass
            
            self.logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Cloudflare")
            return False
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ Cloudflare: {e}")
            return False
    
    def get_categories(self, content_type: str = "channels") -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            self.logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {content_type}...")
            
            url = f"{self.base_url}/{content_type}"
            self.driver.get(url)
            
            if not self.wait_for_cloudflare():
                self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Cloudflare, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                return self.get_fallback_categories(content_type)
            
            time.sleep(3)
            
            categories = []
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_selectors = [
                "a[href*='/channels/']",
                "a[href*='/chats/']",
                ".category-link",
                ".nav-link",
                "[data-category]"
            ]
            
            for selector in category_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        try:
                            link = element.get_attribute("href")
                            text = element.text.strip()
                            
                            if link and text and ("channels" in link or "chats" in link):
                                categories.append({
                                    "name": text,
                                    "url": link,
                                    "type": content_type
                                })
                        except Exception:
                            continue
                    
                    if categories:
                        break
                        
                except Exception:
                    continue
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_categories = []
            seen_urls = set()
            
            for cat in categories:
                if cat["url"] not in seen_urls:
                    unique_categories.append(cat)
                    seen_urls.add(cat["url"])
            
            if unique_categories:
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                return unique_categories[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            else:
                self.logger.warning("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self.get_fallback_categories(content_type)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return self.get_fallback_categories(content_type)
    
    def get_fallback_categories(self, content_type: str) -> List[Dict[str, str]]:
        """Fallback –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å —Å–∞–π—Ç–∞"""
        if content_type == "channels":
            return [
                {"name": "–ù–æ–≤–æ—Å—Ç–∏", "url": f"{self.base_url}/channels/news", "type": "channels"},
                {"name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "url": f"{self.base_url}/channels/entertainment", "type": "channels"},
                {"name": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "url": f"{self.base_url}/channels/tech", "type": "channels"},
                {"name": "–°–ø–æ—Ä—Ç", "url": f"{self.base_url}/channels/sport", "type": "channels"},
                {"name": "–ú—É–∑—ã–∫–∞", "url": f"{self.base_url}/channels/music", "type": "channels"},
            ]
        else:
            return [
                {"name": "–û–±—â–µ–Ω–∏–µ", "url": f"{self.base_url}/chats/communication", "type": "chats"},
                {"name": "–ò–≥—Ä—ã", "url": f"{self.base_url}/chats/games", "type": "chats"},
                {"name": "–†–∞–±–æ—Ç–∞", "url": f"{self.base_url}/chats/work", "type": "chats"},
                {"name": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", "url": f"{self.base_url}/chats/crypto", "type": "chats"},
            ]
    
    def parse_channel_data(self, url: str, max_pages: int = 1) -> List[Dict[str, str]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        results = []
        
        try:
            self.logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {url} (—Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages})")
            
            for page in range(1, max_pages + 1):
                try:
                    page_url = f"{url}?page={page}" if page > 1 else url
                    self.logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
                    
                    self.driver.get(page_url)
                    
                    if not self.wait_for_cloudflare():
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Cloudflare –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                        continue
                    
                    time.sleep(random.uniform(2, 4))
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                    time.sleep(2)
                    
                    page_results = self.extract_channels_from_page()
                    results.extend(page_results)
                    
                    self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–∞–π–¥–µ–Ω–æ {len(page_results)} –∫–∞–Ω–∞–ª–æ–≤")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    if page < max_pages:
                        delay = random.uniform(3, 6)
                        self.logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ {delay:.1f}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π")
                        time.sleep(delay)
                        
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
                    continue
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
        
        return results
    
    def extract_channels_from_page(self) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        channels = []
        
        try:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
            selectors = [
                "a[href*='t.me/']",
                "[data-channel]",
                ".channel-item",
                ".channel-link",
                "a[href*='telegram']",
            ]
            
            found_links = []
            
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            for selector in selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    
                    for element in elements:
                        try:
                            link = element.get_attribute("href")
                            if link and "t.me/" in link:
                                found_links.append((element, link))
                        except Exception:
                            continue
                            
                except Exception:
                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
            if not found_links:
                page_source = self.driver.page_source
                telegram_links = re.findall(r'https?://t\.me/([a-zA-Z0-9_]+)', page_source)
                
                for username in telegram_links:
                    found_links.append((None, f"https://t.me/{username}"))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            for element, link in found_links:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º username
                    username_match = re.search(r't\.me/([a-zA-Z0-9_]+)', link)
                    if not username_match:
                        continue
                    
                    username = username_match.group(1)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                    subscribers = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    if element:
                        try:
                            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—è–¥–æ–º —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º
                            parent = element.find_element(By.XPATH, "./..")
                            name_candidates = parent.find_elements(By.CSS_SELECTOR, 
                                ".title, .name, .channel-name, h3, h4, .text-lg, .font-bold")
                            
                            if name_candidates:
                                name = name_candidates[0].text.strip() or username
                            
                            # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                            sub_elements = parent.find_elements(By.CSS_SELECTOR, 
                                ".subscribers, .members, .count, .number")
                            
                            for sub_elem in sub_elements:
                                sub_text = sub_elem.text.strip()
                                if any(keyword in sub_text.lower() for keyword in ['–ø–æ–¥–ø–∏—Å—á–∏–∫', 'member', '—É—á–∞—Å—Ç–Ω–∏–∫', 'k', 'm']):
                                    subscribers = sub_text
                                    break
                        
                        except Exception:
                            name = username
                    else:
                        name = username
                    
                    channels.append({
                        "name": name,
                        "url": link,
                        "subscribers": subscribers,
                        "username": username
                    })
                    
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {e}")
                    continue
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        
        return channels
    
    def save_results(self, results: List[Dict[str, str]], filename: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            if not results:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            filepath = self.results_dir / f"{filename}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write("# TGStat.ru Parser Results\n")
                f.write(f"# –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"# –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(results)}\n\n")
                
                for i, channel in enumerate(results, 1):
                    line = f"{i}. {channel['name']} | {channel['url']} | {channel['subscribers']}\n"
                    f.write(line)
            
            self.logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            self.logger.info(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    def interactive_menu(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\n" + "="*60)
        print("üéâ TGStat.ru Parser - Windows Edition")
        print("="*60)
        
        while True:
            try:
                print("\nüìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
                print("1. –ü–∞—Ä—Å–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
                print("2. –ü–∞—Ä—Å–∏—Ç—å —á–∞—Ç—ã")  
                print("3. –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
                print("4. –í—ã—Ö–æ–¥")
                
                choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
                
                if choice == "1":
                    self.parse_content("channels")
                elif choice == "2":
                    self.parse_content("chats")
                elif choice == "3":
                    self.test_connection()
                elif choice == "4":
                    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é: {e}")
    
    def parse_content(self, content_type: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        try:
            print(f"\nüîç –ü–∞—Ä—Å–∏–Ω–≥ {content_type}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebDriver
            if not self.setup_webdriver():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å WebDriver")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.get_categories(content_type)
            
            if not categories:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                return
            
            print(f"\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
            for i, cat in enumerate(categories, 1):
                print(f"{i}. {cat['name']}")
            
            # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            while True:
                try:
                    cat_choice = input(f"\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (1-{len(categories)}): ").strip()
                    cat_index = int(cat_choice) - 1
                    
                    if 0 <= cat_index < len(categories):
                        selected_category = categories[cat_index]
                        break
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            
            # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            print("\nüìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print("1. 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–±—ã—Å—Ç—Ä–æ)")
            print("2. 10 —Å—Ç—Ä–∞–Ω–∏—Ü (—Å—Ä–µ–¥–Ω–µ)")
            print("3. 50+ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–æ–ª–≥–æ)")
            print("4. –°–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            
            while True:
                try:
                    page_choice = input("\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ (1-4): ").strip()
                    
                    if page_choice == "1":
                        max_pages = 1
                        break
                    elif page_choice == "2":
                        max_pages = 10
                        break
                    elif page_choice == "3":
                        max_pages = 50
                        break
                    elif page_choice == "4":
                        custom_pages = input("üëâ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ").strip()
                        max_pages = int(custom_pages)
                        break
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {selected_category['name']}")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {max_pages}")
            
            results = self.parse_channel_data(selected_category['url'], max_pages)
            
            if results:
                filename = f"{content_type}_{selected_category['name'].replace(' ', '_')}"
                self.save_results(results, filename)
                print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ: {len(results)} –∫–∞–Ω–∞–ª–æ–≤")
            else:
                print("\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
        finally:
            if self.driver:
                self.driver.quit()
                self.driver = None
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        if not self.check_internet_connection():
            print("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Chrome
        chrome_version = self.get_chrome_version()
        print(f"üîç –í–µ—Ä—Å–∏—è Chrome: {chrome_version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ WebDriver
        if self.setup_webdriver():
            print("‚úÖ WebDriver –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            try:
                self.driver.get("https://tgstat.ru")
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ tgstat.ru —É—Å–ø–µ—à–Ω–æ")
                
                if self.wait_for_cloudflare():
                    print("‚úÖ Cloudflare –∑–∞—â–∏—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
                else:
                    print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Cloudflare –∑–∞—â–∏—Ç–æ–π")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            
            finally:
                self.driver.quit()
                self.driver = None
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebDriver")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.driver:
            try:
                self.driver.quit()
            except Exception:
                pass
            self.driver = None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = None
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        if sys.version_info < (3, 7):
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
            return
        
        print("üêç Python –≤–µ—Ä—Å–∏—è:", sys.version.split()[0])
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = TGStatParser()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
        if not parser.check_internet_connection():
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        parser.interactive_menu()
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if parser:
            parser.cleanup()


if __name__ == "__main__":
    main()