#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ TGStat.ru Parser
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
import requests
import subprocess
from pathlib import Path
import json


def test_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    
    if version >= (3, 7):
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
    else:
        print(f"‚ùå Python {version.major}.{version.minor}.{version.micro} - –¢—Ä–µ–±—É–µ—Ç—Å—è 3.7+")
        return False


def test_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = ['selenium', 'requests']
    all_installed = True
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"‚ùå {package} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
            all_installed = False
    
    return all_installed


def test_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    
    test_urls = [
        "https://google.com",
        "https://tgstat.ru"
    ]
    
    for url in test_urls:
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {url} - –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {url} - –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        except requests.RequestException as e:
            print(f"‚ùå {url} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    return True


def test_chrome_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Chrome...")
    
    chrome_paths = [
        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
        r"C:\Users\{username}\AppData\Local\Google\Chrome\Application\chrome.exe".format(
            username=os.getenv('USERNAME', 'User')
        )
    ]
    
    for chrome_path in chrome_paths:
        if os.path.exists(chrome_path):
            print(f"‚úÖ Chrome –Ω–∞–π–¥–µ–Ω: {chrome_path}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
            try:
                result = subprocess.run([
                    'wmic', 'datafile', 'where', f'name="{chrome_path.replace(chr(92), chr(92)+chr(92))}"',
                    'get', 'Version', '/value'
                ], capture_output=True, text=True, timeout=10)
                
                if result.returncode == 0:
                    for line in result.stdout.strip().split('\n'):
                        if line.startswith('Version='):
                            version = line.split('=')[1].strip()
                            print(f"üî¢ –í–µ—Ä—Å–∏—è Chrome: {version}")
                            return True
            except Exception:
                pass
            
            return True
    
    print("‚ùå Chrome –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Chrome: https://www.google.com/chrome/")
    return False


def test_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    required_files = [
        "main.py",
        "requirements.txt",
        "README_WINDOWS.md"
    ]
    
    all_exist = True
    
    for file in required_files:
        filepath = Path(file)
        if filepath.exists():
            print(f"‚úÖ {file} - –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù")
            all_exist = False
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    test_dirs = ["results", "logs", "drivers"]
    for dir_name in test_dirs:
        test_dir = Path(dir_name)
        try:
            test_dir.mkdir(exist_ok=True)
            if test_dir.exists():
                print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ - —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}/ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å")
                all_exist = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {dir_name}/: {e}")
            all_exist = False
    
    return all_exist


def test_encoding():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8"""
    print("\nüî§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8...")
    
    test_string = "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: –∫–∞–Ω–∞–ª—ã, —á–∞—Ç—ã, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ üì±"
    
    try:
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        test_file = Path("test_encoding.txt")
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_string)
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        with open(test_file, 'r', encoding='utf-8') as f:
            read_string = f.read()
        
        if read_string == test_string:
            print("‚úÖ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            test_file.unlink()  # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            return True
        else:
            print("‚ùå UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ - –ø—Ä–æ–±–ª–µ–º–∞ —Å —á—Ç–µ–Ω–∏–µ–º")
            return False
            
    except Exception as e:
        print(f"‚ùå UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞ - –æ—à–∏–±–∫–∞: {e}")
        return False


def test_selenium_basic():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Selenium"""
    print("\nü§ñ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Selenium...")
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        
        print("‚úÖ Selenium –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        print("‚úÖ Chrome options –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ù–µ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä –≤ —Ç–µ—Å—Ç–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Selenium: {e}")
        return False


def generate_test_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "="*60)
    print("üìä –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
    print("="*60)
    
    tests = [
        ("Python –≤–µ—Ä—Å–∏—è", test_python_version),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", test_dependencies),
        ("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", test_internet_connection),
        ("Chrome —É—Å—Ç–∞–Ω–æ–≤–∫–∞", test_chrome_installation),
        ("–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", test_file_structure),
        ("UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞", test_encoding),
        ("Selenium –±–∞–∑–æ–≤—ã–π", test_selenium_basic)
    ]
    
    results = {}
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–≤–µ–¥–∏—Ç–µ: python main.py")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è:")
        for test_name, result in results.items():
            if not result:
                print(f"   ‚Ä¢ {test_name}")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        if not results.get("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", True):
            print("   ‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
        if not results.get("Chrome —É—Å—Ç–∞–Ω–æ–≤–∫–∞", True):
            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Chrome: https://www.google.com/chrome/")
        if not results.get("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", True):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path("test_report.json")
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': str(Path().resolve()),
            'results': results,
            'passed': passed,
            'total': total,
            'status': 'PASS' if passed == total else 'FAIL'
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üß™ TGStat.ru Parser - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ Windows")
        
        generate_test_report()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    main()